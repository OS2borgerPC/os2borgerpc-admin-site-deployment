version: '3'
silent: true

tasks:
  default:
    desc: List available tasks
    cmds:
      - echo "Available tasks:"
      - echo "task install - Install OS2BorgerPC Adminsite"
      - echo "task upgrade - Upgrade OS2BorgerPC Adminsite to a newer version"
      - echo "task up - Start the application by bringing all containers up"
      - echo "task stop - Stop the application by stopping all containers"
      - echo "task reinstall - Reinstall the application. WARNING Deletes the database and uploaded files!"
      - echo "task purge - Remove the application. WARNING Deletes the database and uploaded files!"
      - echo "task down - Remove all containers"
      - echo "task cron - Run cron jobs manually"
      - echo "task backup_db - Perform a database dump"

  install:
    desc: Install OS2BorgerPC Adminsite
    cmds:
      - task _show_preinstall_notes
      - task _version_file
      - task _prepare_nginx_conf
      - echo "Installing"
      - docker compose --env-file .env -f compose.yml pull
      - docker compose --env-file .env -f compose.yml up --force-recreate --detach --remove-orphans
      - task _show_notes

  upgrade: 
    desc: Upgrade OS2BorgerPC Adminsite to a newer version
    cmds:
      - task _show_upgrade_notes
      - task _version_file
      - task stop
      - docker compose --env-file .env -f compose.yml down
      - docker compose --env-file .env -f compose.yml pull
      - docker compose --env-file .env -f compose.yml up --force-recreate --detach --remove-orphans
      - task _show_notes

  reinstall:
    desc: Reinstall the application. WARNING Deletes the database and uploaded files!
    deps:
      - purge
    cmds:
      - task install

  purge:
    desc: Remove the application. WARNING Deletes the database and uploaded files!
    deps:
      - stop
    cmds:
      - docker compose --env-file .env -f compose.yml down -v
      - |
        if [ -f VERSION ]; then
          rm VERSION
          echo "VERSION file deleted."
        fi

  down:
    desc: Remove all containers
    deps:
      - stop
    cmds:
      - docker compose --env-file .env -f compose.yml down
      - |
        if [ -f VERSION ]; then
          rm VERSION
          echo "VERSION file deleted."
        fi

  up:
    desc: Start the application by bringing all containers up
    cmds:
      - docker compose --env-file .env -f compose.yml up -d

  stop:
    desc: Stop the application by stopping all containers
    cmds:
      - docker compose --env-file .env -f compose.yml stop

  cron:
    desc: Run cron jobs manually
    cmds:
      - |
        DOMAIN=$(grep ^DOMAIN= .env | cut -d '=' -f 2)
        echo "Executing check_notifications..."
        curl http://$DOMAIN:8080/jobs/check_notifications -f
        echo ""
        echo "Executing clean_up_database..."
        curl http://$DOMAIN:8080/jobs/clean_up_database -f
        echo ""
        echo "===================================================="
        echo "Automate job execution by adding the lines below to your crontab (crontab -e):"
        echo "===================================================="
        echo ""
        echo "# Run check_notifications every 10 minutes"
        echo "*/10 * * * * curl http://$DOMAIN:8080/jobs/check_notifications -f"
        echo ""
        echo "# Run clean_up_database once a week (Sunday at midnight)"
        echo "0 0 * * 0 curl http://$DOMAIN:8080/jobs/clean_up_database -f"
        echo ""
        echo "===================================================="
        
  backup_db:
    desc: Perform a database dump
    cmds:
      - |
        TIMESTAMP=$(date +%Y%m%d_%H%M%S)
        DB_BACKUP_DIR=$(pwd)/db_backups
        FILENAME=$DB_BACKUP_DIR/db_backup_$TIMESTAMP.sql
        echo "Performing database backup..."
        mkdir -p $DB_BACKUP_DIR  # Ensure the backup directory exists
        DB_USER=$(grep ^DB_USER= .env | cut -d '=' -f 2)
        DB_NAME=$(grep ^DB_NAME= .env | cut -d '=' -f 2)
        echo "Using database user: $DB_USER and database name: $DB_NAME"  # Debugging output
        docker compose exec db pg_dump -U $DB_USER $DB_NAME > $FILENAME
        if [ $? -eq 0 ]; then
          echo "Database backup saved to $FILENAME"
        fi

  _show_upgrade_notes:
    cmds:
      - |
        VERSION=$(grep ^VERSION= .env | cut -d '=' -f 2)
        if [ -f VERSION ] && [ "$(cat VERSION)" = "$VERSION" ]; then
          echo ""
          echo "===================================================="
          echo "Upgrading to release $VERSION..."
          echo "Ups! It looks like release $VERSION is the version currently installed."
          echo ""
          echo "Check out if there is a later release here: https://github.com/OS2borgerPC/os2borgerpc-admin-site/pkgs/container/os2borgerpc-admin-site"
          echo "Edit VERSION in .env with the release tag you want to upgrade to. Then re-run task upgrade."
          echo "===================================================="
          exit 1
        fi
        echo ""
        echo "===================================================="
        echo "You are about to upgrade to version $VERSION."
        echo "===================================================="
        echo "Are you sure you want to continue? (yes/no)"
        read answer && case $answer in
          [Yy][Ee][Ss]) ;;
          *) echo "Upgrade canceled."; exit 1;;
        esac

  _show_preinstall_notes:
    cmds:
      - echo ""
      - echo "===================================================="
      - echo "Pre-installation Requirements"
      - echo "===================================================="
      - echo ""
      - echo "To proceed with the installation, ensure the following steps are completed:"
      - echo "1. Update '.env'. Change at least DOMAIN, DB_PASSWORD and SECRET_KEY."
      - echo "2. Place your SSL certificate files ('nginx.crt' and 'nginx.key') in the 'ssl' directory."
      - echo ""
      - echo "Have you completed the above pre-installation steps? (yes/no)"
      - |
        read answer && case $answer in
          [Yy][Ee][Ss]) ;;
          *) echo "Please complete the pre-install tasks before continuing."; exit 1;;
        esac

  _prepare_nginx_conf:
    cmds:
      - cp example.nginx.conf nginx.conf
      - |
        DOMAIN=$(grep ^DOMAIN= .env | cut -d '=' -f 2)
        sed -i "s/\${DOMAIN}/$DOMAIN/g" nginx.conf

  _version_file:
    cmds:
      - |
        VERSION=$(grep ^VERSION= .env | cut -d '=' -f 2)
        echo $VERSION > VERSION
        echo "VERSION file updated with value: $VERSION"

  _show_notes:
    cmds:
      - |
        DOMAIN=$(grep ^DOMAIN= .env | cut -d '=' -f 2)
        ADMIN_USERNAME=$(grep ^ADMIN_USERNAME= .env | cut -d '=' -f 2)
        ADMIN_PASSWORD=$(grep ^ADMIN_PASSWORD= .env | cut -d '=' -f 2)
        echo ""
        echo "===================================================="
        echo "OS2Borgerpc Admin is now available via the URLs below"
        echo "===================================================="
        echo "Admin: https://$DOMAIN"
        echo "Django Backend: https://$DOMAIN/admin"
        echo "===================================================="
        echo "You can log in with the following credentials:"
        echo "Username: $ADMIN_USERNAME"
        echo "Password: $ADMIN_PASSWORD"
        echo "===================================================="
        echo "IMPORTANT: Please change the password of the admin user right away."
        echo "You can do this from the menu item 'Brugere' in the main menu of OS2BorgerPC Admin."
        echo "===================================================="
